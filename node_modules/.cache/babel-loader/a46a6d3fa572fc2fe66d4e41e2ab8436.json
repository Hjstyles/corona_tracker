{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\himanshu\\\\Desktop\\\\coronaTracker\\\\src\\\\components\\\\Chart\\\\Chart.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { fetchDailyData } from '../../api';\nimport { Line, Bar } from 'react-chartjs-2';\nimport styles from './Chart.module.css';\n\nconst Chart = ({\n  data: {\n    confirmed,\n    recovered,\n    deaths\n  },\n  country\n}) => {\n  const [dailyData, setDailyData] = useState([]);\n  useEffect(() => {\n    const fectAPI = async () => {\n      setDailyData(await fetchDailyData());\n    };\n\n    fectAPI();\n  }, []);\n  const LineChart = dailyData.length ? /*#__PURE__*/React.createElement(Line, {\n    data: {\n      labels: dailyData.map(({\n        data\n      }) => data),\n      datasets: [{\n        data: dailyData.map(({\n          confirmed\n        }) => confirmed),\n        label: 'Infected',\n        borderColor: '#3333ff',\n        fill: true\n      }, {\n        data: dailyData.map(({\n          deaths\n        }) => deaths),\n        label: 'Deaths',\n        borderColor: 'red',\n        backgroundColor: 'rgba(250,0,0,0.5)',\n        fill: true\n      }]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }\n  }) : null;\n  const BarChart = confirmed ? /*#__PURE__*/React.createElement(Bar, {\n    data: {\n      labels: ['Infected', 'Recovered', 'Deaths'],\n      datasets: [{\n        label: 'People',\n        backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\n        data: [confirmed.value, recovered.value, deaths.value]\n      }]\n    },\n    options: {\n      legend: {\n        display: false\n      },\n      title: {\n        display: true,\n        text: `Current state in ${country}`\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }) : null;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.contanier,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, country ? BarChart : LineChart);\n};\n\nexport default Chart;","map":{"version":3,"sources":["C:/Users/himanshu/Desktop/coronaTracker/src/components/Chart/Chart.jsx"],"names":["React","useState","useEffect","fetchDailyData","Line","Bar","styles","Chart","data","confirmed","recovered","deaths","country","dailyData","setDailyData","fectAPI","LineChart","length","labels","map","datasets","label","borderColor","fill","backgroundColor","BarChart","value","legend","display","title","text","contanier"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;AACA,SAASC,cAAT,QAA+B,WAA/B;AACA,SAASC,IAAT,EAAeC,GAAf,QAA0B,iBAA1B;AAEA,OAAOC,MAAP,MAAmB,oBAAnB;;AAEA,MAAMC,KAAK,GAAG,CAAC;AAACC,EAAAA,IAAI,EAAE;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,SAAb;AAAwBC,IAAAA;AAAxB,GAAP;AAAwCC,EAAAA;AAAxC,CAAD,KAAsD;AAChE,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,EAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAE,MAAM;AACb,UAAMa,OAAO,GAAG,YAAY;AACxBD,MAAAA,YAAY,CAAC,MAAMX,cAAc,EAArB,CAAZ;AACH,KAFD;;AAGAY,IAAAA,OAAO;AACV,GALQ,EAKN,EALM,CAAT;AAQA,QAAMC,SAAS,GACXH,SAAS,CAACI,MAAV,gBACI,oBAAC,IAAD;AACA,IAAA,IAAI,EAAG;AACHC,MAAAA,MAAM,EAAEL,SAAS,CAACM,GAAV,CAAe,CAAE;AAAEX,QAAAA;AAAF,OAAF,KAAeA,IAA9B,CADL;AAEHY,MAAAA,QAAQ,EAAG,CAAC;AACRZ,QAAAA,IAAI,EAAGK,SAAS,CAACM,GAAV,CAAe,CAAE;AAAEV,UAAAA;AAAF,SAAF,KAAoBA,SAAnC,CADC;AAERY,QAAAA,KAAK,EAAG,UAFA;AAGRC,QAAAA,WAAW,EAAE,SAHL;AAIRC,QAAAA,IAAI,EAAG;AAJC,OAAD,EAKR;AACCf,QAAAA,IAAI,EAAGK,SAAS,CAACM,GAAV,CAAe,CAAE;AAAER,UAAAA;AAAF,SAAF,KAAiBA,MAAhC,CADR;AAECU,QAAAA,KAAK,EAAG,QAFT;AAGCC,QAAAA,WAAW,EAAE,KAHd;AAICE,QAAAA,eAAe,EAAE,mBAJlB;AAKCD,QAAAA,IAAI,EAAG;AALR,OALQ;AAFR,KADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,GAiBS,IAlBb;AAoBA,QAAME,QAAQ,GACVhB,SAAS,gBACL,oBAAC,GAAD;AACA,IAAA,IAAI,EAAE;AACFS,MAAAA,MAAM,EAAE,CAAC,UAAD,EAAa,WAAb,EAA0B,QAA1B,CADN;AAEFE,MAAAA,QAAQ,EAAE,CAAC;AACPC,QAAAA,KAAK,EAAE,QADA;AAEPG,QAAAA,eAAe,EAAE,CAAC,sBAAD,EAAyB,sBAAzB,EAAiD,sBAAjD,CAFV;AAGPhB,QAAAA,IAAI,EAAG,CAACC,SAAS,CAACiB,KAAX,EAAkBhB,SAAS,CAACgB,KAA5B,EAAmCf,MAAM,CAACe,KAA1C;AAHA,OAAD;AAFR,KADN;AAUA,IAAA,OAAO,EAAE;AACLC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,OAAO,EAAE;AAAX,OADH;AAELC,MAAAA,KAAK,EAAG;AAAED,QAAAA,OAAO,EAAE,IAAX;AAAiBE,QAAAA,IAAI,EAAE,oBAAmBlB,OAAQ;AAAlD;AAFH,KAVT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADK,GAeC,IAhBd;AAmBJ,sBACI;AAAM,IAAA,SAAS,EAAEN,MAAM,CAACyB,SAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKnB,OAAO,GAAGa,QAAH,GAAcT,SAD1B,CADJ;AAKC,CAvDD;;AAwDA,eAAeT,KAAf","sourcesContent":["import React, { useState, useEffect} from 'react';\nimport { fetchDailyData } from '../../api'\nimport { Line, Bar } from 'react-chartjs-2'\n\nimport styles from './Chart.module.css'\n\nconst Chart = ({data :{ confirmed, recovered, deaths}, country}) => {\n    const [dailyData, setDailyData] = useState([]);\n\n    useEffect( () => {\n        const fectAPI = async () => {\n            setDailyData(await fetchDailyData());\n        }\n        fectAPI();\n    }, [])\n\n    \n    const LineChart = (\n        dailyData.length ? (\n            <Line\n            data ={{\n                labels: dailyData.map( ( { data }) => data),\n                datasets : [{\n                    data : dailyData.map( ( { confirmed }) => confirmed ),\n                    label : 'Infected',\n                    borderColor: '#3333ff',\n                    fill : true\n                }, {\n                    data : dailyData.map( ( { deaths }) => deaths ),\n                    label : 'Deaths',\n                    borderColor: 'red',\n                    backgroundColor: 'rgba(250,0,0,0.5)',\n                    fill : true\n                }]\n            }}\n            />): null       \n    );\n    const BarChart = (\n        confirmed ? (\n            <Bar\n            data={{\n                labels: ['Infected', 'Recovered', 'Deaths'],\n                datasets: [{\n                    label: 'People',\n                    backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\n                    data : [confirmed.value, recovered.value, deaths.value]\n                }]\n                \n            }}\n            options={{\n                legend: { display: false},\n                title : { display: true, text:`Current state in ${country}`}\n            }} \n            />) : null\n    )\n\nreturn(\n    <div  className={styles.contanier}>\n        {country ? BarChart : LineChart}\n    </div>\n    )\n}\nexport default Chart;"]},"metadata":{},"sourceType":"module"}